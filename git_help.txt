working directory --> Staging Area --> .git repository(directory)

usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.


git config --global --list;
git config --global core.editor "vim"
git config --global color.ui true
git config --global user.name "author name"
git config --global user.email "user_email"
git help tutorial
git help everyday
git init
git status
git add file1 file2
git commit -m "type your msg"
git push --set-upstream user.name branch
git help command
git rm file1.txt --> then proceed for commit
git mv file1.txt file2.txt --> then proceed for commit

git remote add origin URL
git remote -v
git push -u origin master
git log --author="author name"
git log --oneline
git rebase -i HEAD~1

git log --author="author name"

git diff --cached
git diff --staged
git diff



Command	Description
git init	Initialize a local Git repository
git clone repo_url	Clone public repository
git clone ssh://git@github.com/[username]/[repository-name].git	Clone private repository
git status	Check status
git add [file-name]	Add a file to the staging area
git add -A	Add all new and changed files to the staging area
git commit -m "[commit message]"	Commit changes
git rm -r [file-name.txt]	Remove a file (or folder)
git branch	List of branches (the asterisk denotes the current branch)
git branch -a	List all branches (local and remote)
git branch [branch name]	Create a new branch
git branch -d [branch name]	Delete a branch
git branch -D [branch name]	Delete a branch forcefully
git push origin --delete [branch name]	Delete a remote branch
git checkout -b [branch name]	Create a new branch and switch to it
git checkout -b [branch name] origin/[branch name]	Clone a remote branch and switch to it
git branch -m [old branch name] [new branch name]	Rename a local branch
git checkout [branch name]	Switch to a branch
git checkout -	Switch to the branch last checked out
git checkout -- [file-name.txt]	Discard changes to a file
git merge [branch name]	Merge a branch into the active branch
git merge [source branch] [target branch]	Merge a branch into a target branch
git stash	Stash changes in a dirty working directory
git stash clear	Remove all stashed entries
git push origin [branch name]	Push a branch to your remote repository
git push -u origin [branch name]	Push changes to remote repository (and remember the branch)
git push	Push changes to remote repository (remembered branch)
git push origin --delete [branch name]	Delete a remote branch
git pull	Update local repository to the newest commit
git pull origin [branch name]	Pull changes from remote repository
git remote add origin ssh://git@github.com/[username]/[repository-name].git	Add a remote repository
git remote set-url origin ssh://git@github.com/[username]/[repository-name].git	Set a repository's origin branch to SSH
git log	View changes
git log --summary	View changes (detailed)
git log --oneline	View changes (briefly)
git diff [source branch] [target branch]	Preview changes before merging
git revert commitid	Revert commit changes
git config --global user.name "your_username"	Set globally Username
git config --global user.email "your_email_address@example.com"	Set globally Email id
git config --global --list	Get global config

gitk
git commit --allow-empty -m "Empty commit"
git commit --allow-empty-message --no-edit
git branch -m old-name new-name
git branch -m old-name new-name
git commit --amned filename

git log -n 2

git reset --hard HEAD~1
git reset --soft HEAD~1
git reset --mixed HEAD~1
git revert commit_id
git tag -a v1.0 -m "type your msg here"
git tag -d <tag_name>
git push --delete origin <tag_name>
git push --delete origin v1.0
git push origin :refs/tags/<tag_name>
git push origin :refs/tags/v1.0
git push origin :refs/tags/v1.0
git config --local user.name "type your name"
git config --local user.email "type your email"
git push origin :refs/tags/v1.0
git config --list
git config --list --show-origin
git config --global core.editor nano
git config --global core.editor "code --wait"
git config --global core.editor vim
