Iterator is a behavioral design pattern that allows sequential traversal through 
a complex data structure without exposing its internal details.

Thanks to the Iterator, clients can go over 
elements of different collections in a similar fashion using a single iterator interface.

Usage examples: The pattern is very common in C++ code. Many frameworks and libraries use it to provide a standard way for traversing their collections.

Identification: Iterator is easy to recognize by the navigation methods (such as next, previous and others). Client code that uses iterators might not have direct access to the collection being traversed.

Conceptual Example
This example illustrates the structure of the Iterator design pattern. It focuses on answering these questions:

What classes does it consist of?
What roles do these classes play?
In what way the elements of the pattern are related?