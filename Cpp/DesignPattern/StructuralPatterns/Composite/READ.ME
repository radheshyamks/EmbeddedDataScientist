Composite is a structural design pattern that lets you compose objects into tree structures and then work 
with these structures as if they were individual objects.

Composite became a pretty popular solution for the most problems that require building a tree structure.
Composite’s great feature is the ability to run methods recursively over the whole tree structure and sum up the results.

Usage examples: The Composite pattern is pretty common in C++ code. It’s often used to represent hierarchies of 
user interface components or the code that works with graphs.

Identification: If you have an object tree, and each object of a tree is a part of the same class hierarchy, 
this is most likely a composite. If methods of these classes delegate the work to child objects of the tree and do 
it via the base class/interface of the hierarchy, this is definitely a composite.

Conceptual Example
This example illustrates the structure of the Composite design pattern. It focuses on answering these questions:

What classes does it consist of?
What roles do these classes play?
In what way the elements of the pattern are related?